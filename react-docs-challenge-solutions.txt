NOTE:

All previous challenges were simply enough that I did not care to paste my solutions in here.

============================================================================================================

PASSING-PROPS-TO-A-COMPONENT    CHALLENGE 1

import { getImageUrl } from './utils.js';

// Extracted component Profile
function Profile({ name, imgID, profession, award, awardDescription, discovery }){
  return (
    <>
      <h2>{name}</h2>
      <img 
        className="avatar"
        src={getImageUrl(imgID)}
        alt={name}
        width={70}
        height={70}
      />
      <ul>
        <li>
          <b>Profession: </b>
          {profession}
        </li>
        <li>
          <b>Awards: {award} </b>
          {awardDescription}
        </li>
        <li>
          <b>Discovererd: </b>
          {discovery}
        </li>
      </ul>
    </>
  );
}

export default function Gallery() {
  return (
    <div>
      <h1>Notable Scientists</h1>
      <section className="profile">
      <Profile 
        name="Maria Skłodowska-Curie"
        imgID="szV5sdG"
        profession="physicist and chemist"
        award="4"
        awardDescription="(Nobel Prize in Physics, Nobel Prize in Chemistry, Davy Medal, Matteucci Medal)"
        discovery="polonium (element)" />
      </section>
      <section className="profile">
      <Profile 
        name="Katsuko Saruhashi"
        imgID="YfeOqp2"
        profession="geochemist"
        award="2"
        awardDescription="(Miyake Prize for geochemistry, Tanaka Prize)"
        discovery="a method for measuring carbon dioxide in seawater" />
      </section>
    </div>
  );
}

============================================================================================================

PASSING-PROPS-TO-A-COMPONENT    CHALLENGE 2

import { getImageUrl } from './utils.js';

function Avatar({ person, size }) {
  // Evaluate image size
  let imgSize = size < 90 ? 's' : 'b';
  return (
    <img
      className="avatar"
      src={getImageUrl(person, imgSize)}
      alt={person.name}
      width={size}
      height={size}
    />
  );
}

export default function Profile() {
  return (
    <Avatar
      size={40}a
      person={{ 
        name: 'Gregorio Y. Zara', 
        imageId: '7vQD0fP'
      }}
    />
  );
}

============================================================================================================

PASSING-PROPS-TO-A-COMPONENT    CHALLENGE 3

// Extraced as component Card
function Card ({ children }) {
  return (
    <div className="card">
      {children}
    </div>
  );
}

export default function Profile() {
  return (
    <div>
      <Card>
        <div className="card-content">
          <h1>Photo</h1>
          <img
            className="avatar"
            src="https://i.imgur.com/OKS67lhm.jpg"
            alt="Aklilu Lemma"
            width={70}
            height={70}
          />
        </div>
      </Card>
      <Card>
        <div className="card-content">
          <h1>About</h1>
          <p>Aklilu Lemma was a distinguished Ethiopian scientist who discovered a natural treatment to schistosomiasis.</p>
        </div>
      </Card>
    </div>
  );
}


============================================================================================================
============================================================================================================

CONDITIONAL-RENDERING    CHALLENGE 1

function Item({ name, isPacked }) {
  return (
    <li className="item">
      // Ternary operator is used
      {name} {isPacked ? '✔' : '❌'}
    </li>
  );
}

export default function PackingList() {
  return (
    <section>
      <h1>Sally Ride's Packing List</h1>
      <ul>
        <Item 
          isPacked={true} 
          name="Space suit" 
        />
        <Item 
          isPacked={true} 
          name="Helmet with a golden leaf" 
        />
        <Item 
          isPacked={false} 
          name="Photo of Tam" 
        />
      </ul>
    </section>
  );
}

============================================================================================================

CONDITIONAL-RENDERING    CHALLENGE 2

function Item({ name, importance }) {
  return (
    <li className="item">
    // A JS variable is nested inside a litearl string inside the JS opening in JSX
      {name} <i>{importance > 0 && `(Importance: ${importance})`}</i>
    </li>
  );
}

export default function PackingList() {
  return (
    <section>
      <h1>Sally Ride's Packing List</h1>
      <ul>
        <Item 
          importance={9} 
          name="Space suit" 
        />
        <Item 
          importance={0} 
          name="Helmet with a golden leaf" 
        />
        <Item 
          importance={6} 
          name="Photo of Tam" 
        />
      </ul>
    </section>
  );
}

============================================================================================================

CONDITIONAL-RENDERING    CHALLENGE 3

function Info({ drinkDetails }) {
  return (
    <dl>
      <dt>Part of plant</dt>
      <dd>{drinkDetails.partOfPlant}</dd>
      <dt>Caffeine content</dt>
      <dd>{drinkDetails.caffeineContent}</dd>
      <dt>Age</dt>
      <dd>{drinkDetails.age}</dd>
    </dl>
  );
}

function Drink({ name }) {
  let drink = {};
  if (name === 'tea') {
    drink.partOfPlant = 'leaf',
    drink.caffeineContent = '15–70 mg/cup',
    drink.age = '4,000+ years'
  } else {
    drink.partOfPlant = 'bean',
    drink.caffeineContent = '80–185 mg/cup',
    drink.age = '1,000+ years'
  }
  return (
    <section>
      <h1>{name}</h1>
      <Info
        drinkDetails = {drink} />
    </section>
  );
}

export default function DrinkList() {
  return (
    <div>
      <Drink name="tea" />
      <Drink name="coffee" />
    </div>
  );
}


// My solution includes some repetition, definitely still room to improve.
//
// Official solution uses object for each type of drinks, then nest them 
// in an object containing all types of drinks. 

============================================================================================================
============================================================================================================


RENDERING-LISTS    CHALLENGE 1

DATA

export const people = [{
  id: 0,
  name: 'Creola Katherine Johnson',
  profession: 'mathematician',
  accomplishment: 'spaceflight calculations',
  imageId: 'MK3eW3A'
}, {
  id: 1,
  name: 'Mario José Molina-Pasquel Henríquez',
  profession: 'chemist',
  accomplishment: 'discovery of Arctic ozone hole',
  imageId: 'mynHUSa'
}, {
  id: 2,
  name: 'Mohammad Abdus Salam',
  profession: 'physicist',
  accomplishment: 'electromagnetism theory',
  imageId: 'bE7W1ji'
}, {
  id: 3,
  name: 'Percy Lavon Julian',
  profession: 'chemist',
  accomplishment: 'pioneering cortisone drugs, steroids and birth control pills',
  imageId: 'IOjWm71'
}, {
  id: 4,
  name: 'Subrahmanyan Chandrasekhar',
  profession: 'astrophysicist',
  accomplishment: 'white dwarf star mass calculations',
  imageId: 'lrWQx8l'
}];

CODE

import { people } from './data.js';
import { getImageUrl } from './utils.js';

export default function List() {
  const chemists = people.filter(person => person.profession === 'chemist');
  const scientists = people.filter(person => person.profession !== 'chemist');

  const chemistListItems = chemists.map(chemist =>
    <li key={chemist.id}>
      <img
        src={getImageUrl(chemist)}
        alt={chemist.name}
      />
      <p>
        <b>{chemist.name}:</b>
        {' ' + chemist.profession + ' '}
        known for {chemist.accomplishment}
      </p>
    </li>
  );
  const remainingListItems = scientists.map(scientist =>
    <li key={scientist.id}>
      <img
        src={getImageUrl(scientist)}
        alt={scientist.name}
      />
      <p>
        <b>{scientist.name}:</b>
        {' ' + scientist.profession + ' '}
        known for {scientist.accomplishment}
      </p>
    </li>
  );  
  return (
    <article>
      <h1>Chemists</h1>
      <ul>{chemistListItems}</ul>
      <h1>Scientists</h1>
      <ul>{remainingListItems}</ul>
    </article>
  );
}


NOTE: ABOVE WAS MY INITIAL SOLUTION, WHERE filter() WAS CALLED TWICE, CHECK THE 
      OFFICIAL SOLUTION BELOW WHICH HAS LESS DUPLICATION

import { people } from './data.js';
import { getImageUrl } from './utils.js';

let chemists = [];
let everyoneElse = [];
people.forEach(person => {
  if (person.profession === 'chemist') {
    chemists.push(person);
  } else {
    everyoneElse.push(person);
  }
});

// Map provided people array, and generate <li> with each array element using .map()
function CreateList({ title, people }) {
  return (
    <>
      <h2>{title}</h2>
      <ul>
        {
          // Here .map() is called without assignment, so a new array is created 
          and immediately used rendered
          people.map(person => {
            <li key={person.id}>
              <img
                src={getImageUrl(person)}
                alt={person.name}
              />
              <p>
                <b>{person.name}:</b>
                {' ' + person.profession + ' '}
                known for {person.accomplishment}
              </p>
            </li>
          })
        }
      </ul>
    </>
  );
}

export default function List() {
  return (
    <article>
      <h1>Scientists</h1>
      <ListSection
        title="Chemists"
        people={chemists}
      />
      <ListSection
        title="Everyone Else"
        people={everyoneElse}
      />
    </article>    
  );
}


============================================================================================================


RENDERING-LISTS    CHALLENGE 2

DATA

export const recipes = [{
  id: 'greek-salad',
  name: 'Greek Salad',
  ingredients: ['tomatoes', 'cucumber', 'onion', 'olives', 'feta']
}, {
  id: 'hawaiian-pizza',
  name: 'Hawaiian Pizza',
  ingredients: ['pizza crust', 'pizza sauce', 'mozzarella', 'ham', 'pineapple']
}, {
  id: 'hummus',
  name: 'Hummus',
  ingredients: ['chickpeas', 'olive oil', 'garlic cloves', 'lemon', 'tahini']
}];


CODE

import { recipes } from './data.js';

// Two nested .map() calls
function List({ recipes }){
  return(
    <>
      {
        recipes.map(recipe =>
          <ul>
            <li key={recipe.id}>
              <h2>{recipe.name}</h2>
              <ul>
                {
                  recipe.ingredients.map((ingredient, index) => 
                    <li key={index}>{ingredient}</li>
                  )
                }
              </ul>
            </li>
          </ul>
        )
      }
    </>
  );
}

export default function RecipeList() {
  return (
    <div>
      <List
      recipes={recipes} />
    </div>
  );
}


============================================================================================================


RENDERING-LISTS    CHALLENGE 3

import { recipes } from './data.js';

function Recipe({ id, name, ingredients }) {
  return (
    <div>
      <h2>{name}</h2>
      <ul>
        {ingredients.map(ingredient =>
          <li key={ingredient}>
            {ingredient}
          </li>
        )}
      </ul>
    </div>
  );
}

export default function RecipeList() {
  return (
    <div>
      <h1>Recipes</h1>
      {recipes.map(recipe =>
        <Recipe 
        key={recipe.id}
        id={recipe.id}
        name={recipe.name}
        ingredients={recipe.ingredients}
        />
      )}
    </div>
  );
}


============================================================================================================


RENDERING-LISTS    CHALLENGE 4

const poem = {
  lines: [
    'I write, erase, rewrite',
    'Erase again, and then',
    'A poppy blooms.'
  ]
};

export default function Poem() {
  return (
    <article>
      {poem.lines.map((line, index) =>
      <>
        <p key={index}>
          {line}
        </p>
        {
          (index != poem.lines.length - 1) && <hr />
        }
      </>
      )}
    </article>
  );
}


============================================================================================================


KEEPIGN-COMPONENTS-PURE    CHALLENGE 1

export default function Clock({ time }) {
  let hours = time.getHours();
  return (
    <>
      {
        if (hours >= 0 && hours <= 6) {
          <h1 id="time" class="night">
            {time.toLocaleTimeString()}
          </h1>
        } else {
          <h1 id="time" class="day">
            {time.toLocaleTimeString()}
          </h1>
        }
      }
    </>
  );
}

export default function Clock({ time }) {
  let hours = time.getHours();
  return (
    <>
      {}
    </>
  );
}


NOTE: I WAS UNABLE TO SOLVE THIS CHALLENGE BECAUSE I DID NOT KNOW THAT:

  (1) CONDITIONAL STATEMENTS (IF-ELSE, ETC) ARE **NOT** ALLOWED IN RETURN STATEMENTS 
      (BUT TERNARY, && AND OTHER **EXPRESSIONS** ARE OK)
  (2) CONDITIONALLY RENDERING CAN BE DONE BY SETTING `className` ATTRIBUTE, **NOT**
      `class` BECAUSE IT IS A RESERVED KEYWORD


I REFERRED TO THE FOLLOWING OFFICIAL SOLUTION.

export default function Clock({ time }) {
  let hours = time.getHours();
  let className;
  if (hours >= 0 && hours <= 6) {
    className = 'night';
  } else {
    className = 'day';
  }
  return (
    <h1 
    id="time"
    className={className}
    >
      {time.toLocaleTimeString()}
    </h1>
  );
}


============================================================================================================


KEEPIGN-COMPONENTS-PURE    CHALLENGE 2

Profile.js:

import Panel from './Panel.js';
import { getImageUrl } from './utils.js';

export default function Profile({ person }) {
  return (
    <Panel>
      <Header 
      person={person}/>
      <Avatar 
      person={person}/>
    </Panel>
  )
}

function Header({ person }) {
  return <h1>{person.name}</h1>;
}

function Avatar({ person }) {
  return (
    <img
      className="avatar"
      src={getImageUrl(person)}
      alt={person.name}
      width={50}
      height={50}
    />
  );
}

App.js:

import Profile from './Profile.js';

export default function App() {
  return (
    <>
      <Profile person={{
        imageId: 'lrWQx8l',
        name: 'Subrahmanyan Chandrasekhar',
      }} />
      <Profile person={{
        imageId: 'MK3eW3A',
        name: 'Creola Katherine Johnson',
      }} />
    </>
  )
}


============================================================================================================


KEEPIGN-COMPONENTS-PURE    CHALLENGE 3

export default function StoryTray({ stories }) {
  let story = {
    id: 'create',
    label: 'Create Story'
  };

  stories.push(story);

  return (
    <ul>
      <li key={story.id}>
        {story.label}
      </li>
    </ul>
  );
}

NOTE: I ALSO FAILED TO COMPLETE THIS CHALLENGE BECUASE I COULD NOT UNDERSTAND THE PURPOSE OF .map(). AS
      IT TURNED OUT, .map() IS USED TO DISPLAY ITEMS ALREADY STORED IN THE ARRAY. 

I LEARNT:
  (1) PROPS ARE NOT TO BE ALTERED. SO WHILE IT'S OKAY TO .map() AND DISPLAY ALREADY STORED ITEMS, TEMPLATE
      ITEMS MUST NOT BE .push()'D INTO THE ARRAY, BUT RATHER RENDERED DIRECTLY.
  (2) .slice() CAN BE USED TO DUPLICATE ARRAYS.

OFFICAL SOLUTION:

export default function StoryTray({ stories }) {
  return (
    <ul>
      {stories.map(story => (
        <li key={story.id}>
          {story.label}
        </li>
      ))}
      <li>Create Story</li>
    </ul>
  );
}
